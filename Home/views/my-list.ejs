<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <meta charset="utf-8">
    <title>Home Page</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="../css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    <script src="../js/profile.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="../js/data.js" defer></script>
    <script src="../js/search.js" defer></script>
    <script src="../js/filter.js" defer></script>
    <script src="../js/loader.js" defer></script>

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        h1 {
            text-align: center;
            margin: 20px 0;
        }

        #mylist-items {
            max-width: 800px;
            margin: auto;
            padding: 20px;
        }

        .mylist-item {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 100%;
        }

        .mylist-item img {
            width: 50px;
            height: 50px;
            object-fit: cover;
            margin-bottom: 10px;
            border-radius: 5px;
        }

        .mylist-item-details {
            width: 100%;
        }

        .mylist-item-name {
            font-size: 16px;
            font-weight: bold;
        }

        .details-container {
            margin-top: 20px;
            padding: 10px 0;
            width: 30rem;
        }

        .details-section {
            margin-bottom: 15px;
        }

        .details-section label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .details-section input,
        .details-section textarea {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }

        .details-section textarea {
            resize: none;
            /* Prevents unnecessary resizing */
        }

        .countdown {
            font-size: 1.2em;
            color: #ff0000;
            display: none;
            margin-top: 10px;
        }

        .confirm-schedule,
        .remove {
            display: inline-block;
            padding: 8px 16px;
            font-size: 14px;
            font-weight: bold;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }

        .confirm-schedule {
            background-color: #00853e;
        }

        .confirm-schedule:hover {
            background-color: #00b336;
            transform: translateY(-2px);
        }

        .confirm-schedule:active {
            background-color: #00853e;
            transform: translateY(0);
        }

        .remove {
            background-color: #ff4c4c;
        }

        .remove:hover {
            background-color: #ff0000;
            transform: translateY(-2px);
        }

        .remove:active {
            background-color: #ff4c4c;
            transform: translateY(0);
        }

        footer {
            text-align: center;
            padding: 10px;
            background-color: #f1f1f1;
            bottom: 0;
            width: 100%;
        }

        .empty-message {
            text-align: center;
            font-size: 18px;
            color: #555;
        }

        .message {
            color: #00853e;
            font-weight: bold;
            margin-top: 10px;
        }
    </style>
</head>

<body>
    <nav>
        <input type="checkbox" id="check">
        <label for="check" class="checkbtn">
            <i class="fas fa-bars"></i>
        </label>
        <label class="logo">FreshCart<i class="fas fa-shopping-cart"></i></label>
        <ul>
            <li><a class="active" href="/home"><i class="fa fa-home" aria-hidden="true"></i> Home</a></li>
            <li><a href="/list">My List</a></li>
            <li><a href="/order">Orders</a></li>
            <li>
                <a id="cart-link" href="/cart">
                    Cart
                </a>
            </li>
            <li><a href="#">Help</a></li>
            <li><a href="#">About Us</a></li>

        </ul>
        <div class="profile-circle" id="profileCircle">J</div>
    </nav>
    <div id="loader">
        <img src="../images/loading.gif" alt="Loading..." />
    </div>

    <h1>My List</h1>
    <div id="mylist-items"></div>

    <div class="">

        <!-- loading active list items here -->
        <div id="active-list-items"></div>

        <div>
            <div>
                <label for="schedule-date">Select Date:</label>
                <input type="date" id="schedule-date">

                <label for="schedule-time">Select Time:</label>
                <input type="time" id="schedule-time" step="1">
            </div>

            <h2 class="list-total" id="list-total">Total: ₹0.00</h2>

            <div class="details-container">
                <h3>Address & Contact Details</h3>
                <div class="details-section">
                    <label for="address">Address:</label>
                    <textarea id="address" placeholder="Enter your address" rows="4"></textarea>
                    <span class="error" id="address-error"></span>
                </div>
                <div class="details-section">
                    <label for="phone">Phone Number:</label>
                    <input type="text" id="phone" placeholder="Enter your phone number">
                    <span class="error" id="phone-error"></span>
                </div>
                <div class="details-section">
                    <label for="email">Email:</label>
                    <input type="email" id="email" placeholder="Enter your email">
                    <span class="error" id="email-error"></span>
                </div>
            </div>

            <button class="confirm-schedule">Confirm Schedule</button>
        </div>
    </div>


    <!-- loading active list items here -->
    <div id="scheduled-lists"></div>



    <!-- hidden variables section  --------------------------------------------------->

    <div id="user-id" data-userId='<%= JSON.stringify(userId) %>'></div>

    <!-- -------------------------------------------------------------------------- -->

    <footer class="">
        <p>© 2024 FreshCart. All rights reserved.</p>
    </footer>

    <script>
        let activeCountdowns = {};

        async function loadMyListAPI() {

            const myListItems = JSON.parse(localStorage.getItem("myListItems")) || [];
            const activeListItems = await getActiveListItemsAPI()
            const scheduledLists = await getScheduledListAPI();
            const listTotal = document.getElementById("list-total")

            console.log("showing active list items == ", activeListItems)

            const activeListContainer = document.getElementById("active-list-items");
            const AllScheduledListContainer = document.getElementById("scheduled-lists");
            const myListContainer = document.getElementById("mylist-items");

            myListContainer.innerHTML = "";
            activeListContainer.innerHTML = "";
            AllScheduledListContainer.innerHTML = "";
            let total = 0

            if (activeListItems.length === 0) {
                activeListContainer.innerHTML = "<p class='empty-message'>Your List Is Empty!</p>";
            }

            console.log("activelistitem logging == ", activeListItems)

            if (!(activeListItems.length === 0)) {

                activeListItems.forEach(item => {
                    const price = parseFloat(item.price);
                    const activeListItem = document.createElement("div");
                    activeListItem.classList.add("mylist-item");
                    activeListItem.innerHTML = `
                    <img src="${item.image}" alt="${item.product_id}">
                    <div class="mylist-item-details">
                        <div class="mylist-item-name">${item.product_id}</div>
                        <p>Price: ₹${isNaN(price) ? "N/A" : price.toFixed(2)}</p>
                        <p>Quantity: ${item.quantity || 1}</p>
                        <div class="countdown" id="countdown-${item.id}"></div>
                        <button class="remove" data-id="${item.id}">Remove</button>
                        <div class="message" id="message-${item.id}"></div>
                    </div>
                `;
                    activeListContainer.appendChild(activeListItem);
                    total += (item.price * item.quantity);

                    const storedCountdown = JSON.parse(localStorage.getItem(`countdown-${item.id}`));
                    if (storedCountdown) {
                        const targetDate = new Date(storedCountdown.targetDate);
                        if (targetDate > new Date()) {
                            startCountdown(item.id, targetDate);
                        }
                    }
                });

                listTotal.innerText = `Total: ₹${total.toFixed(2)}`;

            }


            scheduledLists.forEach((scheduledList, index) => {

                const scheduledListContainer = document.createElement("div");
                scheduledListContainer.classList.add("scheduled-list");
                scheduledListContainer.innerHTML = `
                        <p>Scheduled List - : ${index + 1}</p>
                    `

                scheduledList.ListItems.forEach(item => {
                    const price = parseFloat(item.price);
                    const scheduledListItem = document.createElement("div");
                    scheduledListItem.classList.add("mylist-item");
                    scheduledListItem.innerHTML = `
                        <img src="${item.image}" alt="${item.product_id}">
                        <div class="mylist-item-details">
                            <div class="mylist-item-name">${item.product_id}</div>
                            <p>Price: ₹${isNaN(price) ? "N/A" : price.toFixed(2)}</p>
                            <p>Quantity: ${item.quantity || 1}</p>
                            <div class="countdown" id="countdown-${item.id}"></div>
                        </div>
                    `;

                    scheduledListContainer.appendChild(scheduledListItem);

                    const storedCountdown = JSON.parse(localStorage.getItem(`countdown-${item.id}`));
                    if (storedCountdown) {
                        const targetDate = new Date(storedCountdown.targetDate);
                        if (targetDate > new Date()) {
                            startCountdown(item.id, targetDate);
                        }
                    }
                })

                const scheduleDetails = document.createElement("div");
                const totalFloat = parseFloat(scheduledList.total);
                scheduleDetails.classList.add("mylist-item");
                scheduleDetails.innerHTML = `
                    <div class="mylist-item-details">
                        <p>List Total: ₹${isNaN(totalFloat) ? "N/A" : totalFloat.toFixed(2)}</p>
                        <p>Schedule Date: ${scheduledList.schedule_date}</p>
                        <p>Schedule Time: ${scheduledList.schedule_time}</p>
                        <p>email: ${scheduledList.email}</p>
                        <p>phone: ${scheduledList.phone}</p>
                        <p>address: ${scheduledList.address}</p>
                    </div>
                    `;
                scheduledListContainer.appendChild(scheduleDetails);


                AllScheduledListContainer.appendChild(scheduledListContainer);
            })


            document.querySelectorAll('.remove').forEach(button => {
                button.addEventListener('click', removeProductAPI);
            });

            document.querySelectorAll('.confirm-schedule').forEach(button => {
                button.addEventListener('click', confirmSchedule);
            });
        }

        async function getScheduledListAPI() {
            const userId = await JSON.parse(
                document.getElementById("user-id").getAttribute("data-userId")
            );

            const params = new URLSearchParams({
                user_id: userId,
            });
            const url = `http://localhost:5000/api/list/scheduled?${params}`;

            console.log("userid == ", userId);

            const response = await fetch(url, {
                method: "GET",
                headers: { "Content-Type": "application/json" },
            });
            const data = await response.json();

            console.log("response of getScheduledList from API = ", response);
            console.log("response.json() of getScheduledList from API = ", data);
            console.log("sch. list", data.list);

            return data.list || [];
        }


        async function getActiveListItemsAPI() {

            const userId = await JSON.parse(
                document.getElementById("user-id").getAttribute("data-userId")
            );

            const params = new URLSearchParams({
                user_id: userId,
            });
            const url = `http://localhost:5000/api/list/active?${params}`;

            console.log("userid == ", userId);

            const response = await fetch(url, {
                method: "GET",
                headers: { "Content-Type": "application/json" },
            });
            const data = await response.json();

            console.log("response of getActiveList from API = ", response);
            console.log("response.json() of getActiveList from API = ", data);
            console.log("list items", data.list.ListItems);

            return data.list.ListItems || [];
        }

        async function getActiveListAPI() {
            const userId = await JSON.parse(
                document.getElementById("user-id").getAttribute("data-userId")
            );

            const params = new URLSearchParams({
                user_id: userId,
            });
            const url = `http://localhost:5000/api/list/active?${params}`;

            console.log("userid == ", userId);

            const response = await fetch(url, {
                method: "GET",
                headers: { "Content-Type": "application/json" },
            });
            const data = await response.json();

            console.log("response of getActiveList from API = ", response);
            console.log("response.json() of getActiveList from API = ", data);
            console.log("activeList", data.list);

            return data.list;
        }

        function loadMyList() {
            const myListItems = JSON.parse(localStorage.getItem("myListItems")) || [];
            const myListContainer = document.getElementById("mylist-items");

            myListContainer.innerHTML = "";

            if (myListItems.length === 0) {
                myListContainer.innerHTML = "<p class='empty-message'>Your List Is Empty!</p>";
                return;
            }

            myListItems.forEach(item => {
                const price = parseFloat(item.price);
                const myListItem = document.createElement("div");
                myListItem.classList.add("mylist-item");
                myListItem.innerHTML = `
                    <img src="${item.image}" alt="${item.name}">
                    <div class="mylist-item-details">
                        <div class="mylist-item-name">${item.product_id}</div>
                        <p>Price: ₹${isNaN(price) ? "N/A" : price.toFixed(2)}</p>
                        <p>Quantity: ${item.quantity || 1}</p>
                        <label for="schedule-date-${item.id}">Select Date:</label>
                        <input type="date" id="schedule-date-${item.id}">
                        <label for="schedule-time-${item.id}">Select Time:</label>
                        <input type="time" id="schedule-time-${item.id}" step="1">
                        <div class="countdown" id="countdown-${item.id}"></div>
                        <button class="confirm-schedule" data-id="${item.id}">Confirm Schedule</button>
                        <button class="remove" data-id="${item.id}">Remove</button>
                        <div class="message" id="message-${item.id}"></div>
                    </div>
                `;
                myListContainer.appendChild(myListItem);

                const storedCountdown = JSON.parse(localStorage.getItem(`countdown-${item.id}`));
                if (storedCountdown) {
                    const targetDate = new Date(storedCountdown.targetDate);
                    if (targetDate > new Date()) {
                        startCountdown(item.id, targetDate);
                    }
                }
            });

            document.querySelectorAll('.remove').forEach(button => {
                button.addEventListener('click', removeProduct);
            });

            document.querySelectorAll('.confirm-schedule').forEach(button => {
                button.addEventListener('click', confirmSchedule);
            });
        }


        async function updateActiveListToScheduled(scheduleDate, scheduleTime, address, phone, email) {

            try {
                const response = await fetch("http://localhost:5000/api/list/active/confirm-schedule", {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        address:address,
                        phone:phone,
                        email: email,
                        schedule_date: scheduleDate,
                        schedule_time: scheduleTime
                    }),
                });

                console.log("response from confirm-schedule api == ", response);
                const data = await response.json();
                console.log("response.data from confirm-schedule api == ", data);


            } catch (error) {
                console.log("error from update active list : ", error)
            }
        }

        async function clearActiveList(listId) {

            const response = await fetch(`http://localhost:5000/api/list/active/clear/${listId}`, {
                method: "DELETE",
                headers: { "Content-Type": "application/json" },
            });

            console.log("response from clearActiveList api == ", response);
            const data = await response.json();
            console.log("response.data from clearActiveList api == ", data);
        }

        function validateCheckoutDetails() {
            const address = document.getElementById("address").value.trim();
            const phone = document.getElementById("phone").value.trim();
            const email = document.getElementById("email").value.trim();
            const phoneRegex = /^[0-9]{10}$/; // Validates 10-digit phone numbers
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // Validates email format

            if (!address) {
                alert("Please enter your address.");
                return false;
            }
            if (!phoneRegex.test(phone)) {
                alert("Please enter a valid 10-digit phone number.");
                return false;
            }
            if (!emailRegex.test(email)) {
                alert("Please enter a valid email address.");
                return false;
            }
            return true;
        }
        
        
        async function confirmSchedule(event) {
            const activeListItems = await getActiveListItemsAPI()
            console.log("confirm schedule button clicked !");

            if (activeListItems.length === 0) {
                alert("list is empty")
                return;
            }
            const activeList = await getActiveListAPI();

            const selectedDate = document.querySelector(`#schedule-date`).value;
            const selectedTime = document.querySelector(`#schedule-time`).value;
            const dateTime = new Date(`${selectedDate}T${selectedTime}`);
            const activeListTotal = activeList.total;
            const listTotal = document.getElementById("list-total")


            console.log("selected-date = ", selectedDate);
            console.log("selected-time = ", selectedTime);
            console.log("date-time = ", dateTime);

            // Validate address and contact details
            if (!validateCheckoutDetails()) {
                return;
            }


            const address = document.getElementById("address").value.trim();
            const phone = document.getElementById("phone").value.trim();
            const email = document.getElementById("email").value.trim();

            if (selectedDate != null && selectedTime != null && !isNaN(dateTime) && dateTime > new Date()) {

                const response = await fetch("http://localhost:5000/create-order", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        amount: activeListTotal,
                        receipt: `receipt_${new Date().getTime()}`,
                    }),
                });

                const order = await response.json();

                console.log("order created using create-order verify pending ===  ", order);

                const options = {
                    key: "rzp_test_ZEsh3BtedaNCaU", // Replace with your Razorpay key ID
                    amount: order.amount,
                    currency: order.currency,
                    name: "FreshCart",
                    description: "Test Transaction",
                    order_id: order.id,
                    prefill: {
                        name: "FreshCart"
                    },
                    handler: async function (response) {
                        try {
                            const verifyResponse = await fetch(
                                "http://localhost:5000/verify-Payment",
                                {
                                    method: "POST",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify(response),
                                }
                            );

                            const verifyResult = await verifyResponse.json();

                            console.log("verify result output === ", verifyResult);
                            if (verifyResult.error) {
                                alert("Payment verification failed!");
                            } else {
                                alert("Your payment is completed!");
                                await updateActiveListToScheduled(selectedDate, selectedTime, address, phone, email);
                                document.querySelector(`#schedule-date`).value = "";
                                document.querySelector(`#schedule-time`).value = "";
                                document.querySelector(`#phone`).value = "";
                                document.querySelector(`#address`).value = "";
                                document.querySelector(`#email`).value = "";
                                listTotal.innerText = `Total: ₹${(0.00).toFixed(2)}`;
                                await loadMyListAPI();
                            }
                        } catch (err) {
                            console.error("Payment verification error:", err);
                            alert("Payment verification failed!");
                        }
                    },
                };

                // Ensure Razorpay SDK is loaded before creating an instance
                if (!window.Razorpay) {
                    alert("Razorpay SDK failed to load. Check your internet connection.");
                    return;
                }

                const rzp = new window.Razorpay(options);
                rzp.open();

            } else {
                alert("Please select a valid future date and time.");
            }
        }

        function startCountdown(itemId, date) {
            const countdownElement = document.getElementById(`countdown-${itemId}`);
            const messageElement = document.getElementById(`message-${itemId}`);
            const confirmButton = document.querySelector(`.confirm-schedule[data-id="${itemId}"]`);
            const removeButton = document.querySelector(`.remove[data-id="${itemId}"]`);

            if (countdownElement) {
                countdownElement.style.display = 'block';
                confirmButton.style.display = 'inline-block';
                removeButton.style.display = 'inline-block';

                const calculateTimeLeft = () => {
                    const now = new Date().getTime();
                    return date.getTime() - now;
                };

                let timeLeft = calculateTimeLeft();

                activeCountdowns[itemId] = setInterval(() => {
                    timeLeft -= 1000;

                    if (timeLeft <= 0) {
                        clearInterval(activeCountdowns[itemId]);
                        delete activeCountdowns[itemId];
                        countdownElement.innerHTML = "Order Completed!";
                        messageElement.innerHTML = "Your Order Will Reach To Your Door Steps Soon 🚚✨!";
                        localStorage.removeItem(`countdown-${itemId}`);
                        moveToOrders(itemId);
                    } else {
                        const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                        const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

                        countdownElement.innerHTML = `${days}d ${hours}h ${minutes}m ${seconds}s`;

                        if (hours < 3) {
                            confirmButton.style.display = 'none';
                            removeButton.style.display = 'none';
                            messageElement.innerHTML = "Your order will get displayed soon...";
                        }
                    }
                }, 1000);
            }
        }

        function removeProduct(event) {
            const removeButton = event.target;
            const myListItem = removeButton.closest('.mylist-item');
            const itemId = removeButton.dataset.id;

            const myListItems = JSON.parse(localStorage.getItem("myListItems")) || [];
            const updatedListItems = myListItems.filter(item => item.id !== itemId);
            localStorage.setItem("myListItems", JSON.stringify(updatedListItems));

            localStorage.removeItem(`countdown-${itemId}`);

            if (activeCountdowns[itemId]) {
                clearInterval(activeCountdowns[itemId]);
                delete activeCountdowns[itemId];
            }

            loadMyList();
        }

        async function removeProductAPI(event) {
            try {
                const removeButton = event.target;
                const myListItem = removeButton.closest('.mylist-item');
                const itemId = removeButton.dataset.id;

                const url = `http://localhost:5000/api/list/active/item/${itemId}`;

                const response = await fetch(url, {
                    method: "DELETE",
                    headers: { "Content-Type": "application/json" },
                });
                const data = await response.json();

                console.log("response of removeProductAPI = ", response);
                console.log("response.json() of removeProductAPI  = ", data);

                if (activeCountdowns[itemId]) {
                    clearInterval(activeCountdowns[itemId]);
                    delete activeCountdowns[itemId];
                }

                loadMyListAPI();


            } catch (error) {
                console.log("error from removeProductAPI", error);
            }
        }
        function moveToOrders(itemId) {
            const myListItems = JSON.parse(localStorage.getItem("myListItems")) || [];
            const orders = JSON.parse(localStorage.getItem("orders")) || [];
            const item = myListItems.find(item => item.id === itemId);
            if (item) {
                orders.push(item);
                localStorage.setItem("orders", JSON.stringify(orders));
            }
        }

        document.addEventListener("DOMContentLoaded", loadMyListAPI);
    </script>
</body>

</html>